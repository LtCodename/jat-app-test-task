{"version":3,"sources":["redux/RateReducer.js","componets/MainPage/MainPage.jsx","App.js","serviceWorker.js","redux/RootReducer.js","index.js"],"names":["reducer","state","action","type","rate","actions","RATE_SET","MainPage","useState","convertFrom","setConvertFrom","convertTo","setConvertTo","value","setValue","allCurrencies","setAllCurrencies","dispatch","useDispatch","useSelector","useEffect","getAllCurrencies","convert","axios","get","then","response","allCurrencyValues","key","data","rates","push","sort","catch","err","console","log","message","selectValue","event","target","name","RateReducer","result","toFixed","className","onChange","map","cur","App","Boolean","window","location","hostname","match","RootReducer","combineReducers","rateReducer","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d6ca9e76.chunk.js","sourcesContent":["const initState = \"...\";\n\nconst RATE_SET = 'RATE_SET';\n\nconst RateReducer = (state = initState, action) => {\n    let copy;\n\n    switch (action.type) {\n        case RATE_SET:\n            copy = action.rate;\n            return copy;\n        default:\n            return state;\n    }\n};\n\nexport default {reducer: RateReducer, actions: {RATE_SET}};\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport './MainPage.css';\nimport RateReducer from \"../../redux/RateReducer\";\n\nconst MainPage = () => {\n    const [convertFrom, setConvertFrom] = useState(\"USD\");\n    const [convertTo, setConvertTo] = useState(\"EUR\");\n    const [value, setValue] = useState(1);\n    const [allCurrencies, setAllCurrencies] = useState([]);\n\n    const dispatch = useDispatch();\n    const rate = useSelector(state => state.rate);\n\n    useEffect(() => {\n        getAllCurrencies();\n    },[]);\n\n    useEffect(() => {\n        convert();\n        // eslint-disable-next-line\n    },[convertTo, convertFrom, value]);\n\n    const getAllCurrencies = () => {\n        axios.get(\"https://api.openrates.io/latest\").then(response => {\n            let allCurrencyValues = [\"EUR\"];\n            for (let key in response.data.rates) {\n                allCurrencyValues.push(key);\n            }\n\n            setAllCurrencies(allCurrencyValues.sort());\n        }).catch(err => {\n            console.log(\"error\", err.message);\n        });\n    };\n\n    const selectValue = (event) => {\n        if (event.target.name === \"from\") {\n            setConvertFrom(event.target.value)\n        } else {\n            setConvertTo(event.target.value);\n        }\n    }\n\n    const convert = () => {\n        dispatch({type: RateReducer.actions.RATE_SET, rate: \"...\"});\n\n        axios.get(`https://api.openrates.io/latest?base=${convertFrom}&symbols=${convertTo}`).then(response => {\n            const result = value * (response.data.rates[convertTo]);\n            dispatch({type: RateReducer.actions.RATE_SET, rate: result.toFixed(2)});\n        }).catch(err => {\n            console.log(\"error\", err.message);\n        });\n    };\n\n    return (\n        <div className=\"column column-h column-v converter-wrapper\">\n            <div className=\"column converter-content\">\n                <span className=\"app-title\">Jat <span className=\"app-title-detail\">App</span> Currency Converter</span> \n                {/* Amount */}\n                <div className=\"row row-h convertor-row\">\n                    <span className=\"convertor-text\">Amount</span>\n                    <input\n                        className=\"convertor-input\"\n                        name=\"value\"\n                        type=\"text\"\n                        value={value}\n                        onChange={event => setValue(event.target.value)}>\n                    </input>\n                </div>\n                {/* From */}\n                <div className=\"row row-h convertor-row\">\n                    <span className=\"convertor-text\">From</span>\n                    <select\n                        className=\"convertor-input\"\n                        name=\"from\"\n                        onChange={(event) => selectValue(event)}\n                        value={convertFrom}>\n                        {allCurrencies.map(cur => (\n                            <option key={cur}>{cur}</option>\n                        ))}\n                    </select>\n                </div>\n                {/* To */}\n                <div className=\"row row-h convertor-row\">\n                    <span className=\"convertor-text\">To</span>\n                    <select\n                        className=\"convertor-input\"\n                        name=\"to\"\n                        onChange={(event) => selectValue(event)}\n                        value={convertTo}>\n                        {allCurrencies.map(cur => (\n                            <option key={cur}>{cur}</option>\n                        ))}\n                    </select>\n                </div>\n                {/* Result */}\n                <div className=\"row row-h\">\n                    <span className=\"converter-result\">{rate}</span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from 'react';\nimport './App.css';\nimport MainPage from './componets/MainPage/MainPage';\n\nfunction App() {\n  return (\n    <div>\n        <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport rateReducer from \"./RateReducer\";\n\nconst RootReducer = combineReducers({\n  rate: rateReducer.reducer,\n});\n\nexport default RootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\n\nimport rootReducer from \"./redux/RootReducer\";\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}